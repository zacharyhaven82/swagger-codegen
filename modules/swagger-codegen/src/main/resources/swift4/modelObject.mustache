open class {{classname}} : NSObject, Codable {

{{#allVars}}
{{#isEnum}}
{{> modelInlineEnumDeclaration}}
{{/isEnum}}
{{/allVars}}
{{#allVars}}
{{#isEnum}}
    {{#description}}/** {{description}} */
    {{/description}}public var {{name}}: {{{datatypeWithEnum}}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
{{/isEnum}}
{{^isEnum}}
    {{#description}}/** {{description}} */
    {{/description}}public var {{name}}: {{{modifiedDataType}}}{{#objcCompatible}}{{#vendorExtensions.x-swift-optional-scalar}}
    public var {{name}}Num: NSNumber? {
        get {
            return {{name}}.map({ return NSNumber(value: $0) })
        }
    }{{/vendorExtensions.x-swift-optional-scalar}}{{/objcCompatible}}
{{/isEnum}}
{{/allVars}}

{{#hasVars}}
    override public init() {
        super.init()
    }

    // Encodable protocol methods
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        {{#allVars}}
        try? container.encodeIfPresent({{{name}}}, forKey: .{{{name}}})
        {{/allVars}}
    }

    // Decodable protocol methods
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        {{#allVars}}
        {{name}} = (try? container.decode({{{datatypeWithEnum}}}.self, forKey: .{{{name}}})){{#defaultValue}} ?? {{{defaultValue}}}{{/defaultValue}}
        {{/allVars}}
    }

{{/hasVars}}
{{#additionalPropertiesType}}
{{/additionalPropertiesType}}
{{^additionalPropertiesType}}
    public enum CodingKeys: String, CodingKey { {{#allVars}}
        case {{name}}{{#vendorExtensions.x-codegen-has-escaped-property-names}}{{#vendorExtensions.x-codegen-escaped-property-name}} = "{{{baseName}}}"{{/vendorExtensions.x-codegen-escaped-property-name}}{{/vendorExtensions.x-codegen-has-escaped-property-names}}{{/allVars}}
    }
{{/additionalPropertiesType}}

}